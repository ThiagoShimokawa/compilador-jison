/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var easy = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,19],$V2=[1,20],$V3=[1,48],$V4=[1,21],$V5=[1,11],$V6=[1,37],$V7=[1,17],$V8=[1,40],$V9=[1,41],$Va=[1,42],$Vb=[1,43],$Vc=[1,44],$Vd=[1,45],$Ve=[1,46],$Vf=[1,47],$Vg=[1,38],$Vh=[1,39],$Vi=[1,22],$Vj=[1,23],$Vk=[1,24],$Vl=[1,25],$Vm=[1,26],$Vn=[1,27],$Vo=[1,28],$Vp=[1,29],$Vq=[1,30],$Vr=[1,31],$Vs=[1,32],$Vt=[1,33],$Vu=[1,35],$Vv=[1,36],$Vw=[1,49],$Vx=[5,11,19,24,25,27,30,32,35,36,45,46,47,48,49,50,52,53,54,64,65,66,67,68,69,71,72,73,74,75,76,78,79,80],$Vy=[1,53],$Vz=[9,17,32],$VA=[9,17],$VB=[9,81],$VC=[1,63],$VD=[1,64],$VE=[1,65],$VF=[1,66],$VG=[1,67],$VH=[1,60],$VI=[1,59],$VJ=[1,61],$VK=[1,62],$VL=[1,70],$VM=[1,76],$VN=[1,80],$VO=[7,9,13,21,22,37,38,39,40,41,42,43,44,54,55,56,57,81],$VP=[9,13,37,38,39,81],$VQ=[7,9,13,21,22,37,38,39,40,41,42,43,44,54,55,81],$VR=[1,127];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"programa":3,"programa_repetition_plus0":4,"EOF":5,"finalizadorLinha":6,",":7,";":8,".":9,"condicionais":10,"SE":11,"logica":12,"ENTAO":13,":":14,"sentencas":15,"blocos":16,"SENAO":17,"repeticao":18,"ENQUANTO":19,"numerica":20,"ATE":21,"FACA":22,"novoComando":23,"COMANDO":24,"STRING":25,"execultaComando":26,"CMD_EXE":27,"sentenca":28,"expressao":29,"NL":30,"bloco":31,"--":32,"blocos_option0":33,"literal":34,"CMD_ESCREVER":35,"(":36,")":37,"CONJUNCAO":38,"DISJUNCAO":39,"==":40,">":41,"<":42,">=":43,"<=":44,"~":45,"TRUE":46,"FALSE":47,"CMD_MARCA_AQUI":48,"CMD_NMARCA_AQUI":49,"CMD_MARCA_EM":50,"ponto":51,"CMD_NMARCA_EM":52,"NUMERO":53,"-":54,"+":55,"*":56,"/":57,"comando":58,"direcao":59,"NORTE":60,"SUL":61,"LESTE":62,"OESTE":63,"CMD_MOVER_PARA":64,"CMD_MARQUE_AQUI":65,"CMD_DESMARQUE":66,"CMD_DESENHE_LINHA":67,"CMD_DESENHE_CIRC":68,"CMD_POLIGONO":69,"pontos3":70,"CMD_ESCREVA":71,"CMD_ESPESSURA_CA":72,"CMD_COR_CA":73,"CMD_ESTILO_CA":74,"CMD_QUADRI":75,"CMD_DESENHE_TRI":76,"comandoMemorize":77,"CMD_MOV":78,"CMD_SAIDA":79,"CMD_MEMORIZE":80,"CMD_MEMORIZE_EM":81,"pontos3_option0":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:",",8:";",9:".",11:"SE",13:"ENTAO",14:":",17:"SENAO",19:"ENQUANTO",21:"ATE",22:"FACA",24:"COMANDO",25:"STRING",27:"CMD_EXE",30:"NL",32:"--",35:"CMD_ESCREVER",36:"(",37:")",38:"CONJUNCAO",39:"DISJUNCAO",40:"==",41:">",42:"<",43:">=",44:"<=",45:"~",46:"TRUE",47:"FALSE",48:"CMD_MARCA_AQUI",49:"CMD_NMARCA_AQUI",50:"CMD_MARCA_EM",52:"CMD_NMARCA_EM",53:"NUMERO",54:"-",55:"+",56:"*",57:"/",60:"NORTE",61:"SUL",62:"LESTE",63:"OESTE",64:"CMD_MOVER_PARA",65:"CMD_MARQUE_AQUI",66:"CMD_DESMARQUE",67:"CMD_DESENHE_LINHA",68:"CMD_DESENHE_CIRC",69:"CMD_POLIGONO",71:"CMD_ESCREVA",72:"CMD_ESPESSURA_CA",73:"CMD_COR_CA",74:"CMD_ESTILO_CA",75:"CMD_QUADRI",76:"CMD_DESENHE_TRI",78:"CMD_MOV",79:"CMD_SAIDA",80:"CMD_MEMORIZE",81:"CMD_MEMORIZE_EM"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[10,5],[10,8],[18,7],[23,4],[26,2],[15,2],[15,2],[15,2],[15,1],[15,1],[15,2],[15,2],[15,1],[31,2],[16,2],[29,1],[29,1],[29,1],[29,4],[29,3],[29,3],[34,1],[12,3],[12,5],[12,5],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[20,1],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[28,1],[59,1],[59,1],[59,1],[59,1],[58,2],[58,1],[58,1],[58,2],[58,2],[58,3],[58,2],[58,2],[58,2],[58,2],[58,4],[58,3],[58,1],[58,2],[58,4],[77,4],[51,5],[70,2],[4,1],[4,2],[33,0],[33,1],[82,0],[82,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            this.$ = {
                nodeType: 'PROGRAMA', 
                sentencas: $$[$0-1]
            };
            return this.$;  
        
break;
case 5:
 
    
        if($$[$0-3].val){
       // console.log($$[$0-3]);
            this.$ = {
                nodeType: 'CONDICIONAL', 
                name: 'IF', 
                params: [$$[$0]] 
            };
        }else
        {
        //console.log($$[$0-3]);
               this.$ = {
                nodeType: 'CONDICIONAL', 
                name: 'IF', 
                params: [] 
                     };  
        }
    
break;
case 6:

            if($$[$0-6].val){
            this.$ = {
                nodeType: 'CONDICIONAL', 
                name: 'IF', 
                params: [$$[$0-3]] 
            };
        }else
        {
               this.$ = {
                nodeType: 'CONDICIONAL', 
                name: 'ELSE', 
                params: [$$[$0]] 
                     };  
        }
        
break;
case 7:

           

             this.$ = {
                nodeType: 'ESTRUTURA DE REPETICAO', 
                name: 'ENQUANTO', 
                params: [$$[$0-5],$$[$0-3],$$[$0]] 
                     };   
        
break;
case 8:
  
             this.$ = {
                nodeType: 'NOVO COMANDO', 
                name: 'METODO', 
                params: [$$[$0-2],$$[$0]] 
                     };   
        
break;
case 9:
  
             this.$ = {
                nodeType: 'EXECULTA COMANDO', 
                name: 'METODO', 
                params: [$$[$0]] 
                     };   
        
break;
case 18:

            this.$ = {
                nodeType: 'BLOCO', 
                comandos: $$[$0]
            };   
           
        
break;
case 19:
 
        if($$[$0]==null)
        {
         this.$ = { 
                nodeType: 'BLOCOS',
                value: [$$[$0-1]] 
            }; 

        }else{
                this.$ = { 
                    nodeType: 'BLOCOS',
                    value: [$$[$0-1], $$[$0]] 
                }; 
            }
        
break;
case 23:

            this.$ = {
                nodeType: 'CMD_ESCREVER',
                val: prompt($$[$0-1], "")
            }; 
        
break;
case 24:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: $$[$0-2].val || $$[$0].val
            }; 
        
break;
case 25:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: $$[$0-2].val && $$[$0].val
            }; 
        
break;
case 27:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: $$[$0-1].val
            }; 
        
break;
case 28:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: $$[$0-3].val || $$[$0-1].val
            }; 
        
break;
case 29:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: $$[$0-3].val && $$[$0-1].val
            }; 
        
break;
case 30:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: $$[$0-2].val == $$[$0].val
            }; 
        
break;
case 31:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: $$[$0-2].val > $$[$0].val
            }; 
        
break;
case 32:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: $$[$0-2].val < $$[$0].val
            }; 
        
break;
case 33:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: $$[$0-2].val >= $$[$0].val
            }; 
        
break;
case 34:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: $$[$0-2].val <= $$[$0].val
            }; 
        
break;
case 35:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: $$[$0-2] == $$[$0]
            }; 
        
break;
case 36:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: !$$[$0].val
            }; 
        
break;
case 37:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: true
            }; 
        
break;
case 38:

            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                val: false
            }; 
        
break;
case 39:

        vals = yy.parser.yy.marcaAqui(1);
            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                nome:'CMD_MARCA_AQUI',
                val: vals
            }; 
        
break;
case 40:

        vals = yy.parser.yy.marcaAqui(2);
            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                nome:'CMD_NMARCA_AQUI',
                val: vals
            }; 
        
break;
case 41:

        vals =yy.parser.yy.marcaEm(1,$$[$0]);
            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                nome:'CMD_MARCA_EM',
                val: vals,
                params : $$[$0]
            }; 
        
break;
case 42:

        vals =yy.parser.yy.marcaEm(2,$$[$0]);
            this.$ = {
                nodeType: 'EXPRESSAO_LOGICA',
                nome:'CMD_NMARCA_EM',
                val: vals,
                params : $$[$0]
            }; 
        
break;
case 43:

            this.$ = {
                nodeType: 'EXPRESSAO_NUMERO',
                val: Number(yytext)
            }; 
        
break;
case 44:

            this.$ = {
                nodeType: 'EXPRESSAO_NUMERO',
                val: -($$[$0].val)
            }; 
        
break;
case 45:

            this.$ = {
                nodeType: 'EXPRESSAO_NUMERO',
                name: 'SOMA',
                val: ($$[$0-2].val + $$[$0].val)
            }; 
        
break;
case 46:

            this.$ = {
                nodeType: 'EXPRESSAO_NUMERO',
                name: 'SUBTRACAO',
                val: ($$[$0-2].val - $$[$0].val)
            }; 
        
break;
case 47:

            this.$ = {
                nodeType: 'EXPRESSAO_NUMERO',
                name: 'MULTIPLICACAO',
                val: ($$[$0-2].val * $$[$0].val)
            }; 
        
break;
case 48:

            this.$ = {
                nodeType: 'EXPRESSAO_NUMERO',
                name: 'DIVISAO',
                val: ($$[$0-2].val / $$[$0].val)
            }; 
        
break;
case 49:

            this.$ = {
                nodeType: 'EXPRESSAO_NUMERO',
                val: $$[$0-1].val
            }; 
        
break;
case 55:
 
        this.$ = {
            nodeType: 'COMANDO', 
            name: 'MOVER_PARA', 
            params: [$$[$0]] 
        };
    
break;
case 56:
                    
     this.$ = {
            nodeType: 'COMANDO', 
            name: 'CMD_MARQUE_AQUI' 
        };
    
break;
case 57:
      	                            
     this.$ = {
            nodeType: 'COMANDO', 
            name: 'CMD_DESMARQUE' 
        };
    
break;
case 58:
 
                this.$ = {
                    nodeType: 'COMANDO', 
                    name: 'CMD_DESENHE_LINHA', 
                    params: [$$[$0]] 
                };
            
break;
case 59:
 
                this.$ = {
                    nodeType: 'COMANDO', 
                    name: 'CMD_DESENHE_CIRC', 
                    params: [$$[$0]]
                };
            
break;
case 60:
 
                this.$ = {
                    nodeType: 'COMANDO', 
                    name: 'CMD_POLIGONO', 
                    params: [$$[$0-1],$$[$0]] 
                };
            
break;
case 61:
 
                this.$ = {
                    nodeType: 'COMANDO', 
                    name: 'CMD_ESCREVA', 
                    params: [$$[$0]] 
                };
        
break;
case 62:
 
                this.$ = {
                    nodeType: 'COMANDO', 
                    name: 'CMD_ESPESSURA_CA', 
                    params: [$$[$0]] 
                };
        
break;
case 63:
 
                this.$ = {
                    nodeType: 'COMANDO', 
                    name: 'CMD_COR_CA', 
                    params: [$$[$0]] 
                };
        
break;
case 64:
 
                this.$ = {
                    nodeType: 'COMANDO', 
                    name: 'CMD_ESTILO_CA', 
                    params: [$$[$0]] 
                };
        
break;
case 65:
 
                this.$ = {
                    nodeType: 'COMANDO', 
                    name: 'CMD_QUADRI', 
                    params: [$$[$0-2],$$[$0-1],$$[$0]] 
                };
            
break;
case 66:
 
                this.$ = {
                    nodeType: 'COMANDO', 
                    name: 'CMD_DESENHE_TRI', 
                    params: [$$[$0-1],$$[$0]] 
                };
            
break;
case 68:
 
                this.$ = {
                    nodeType: 'COMANDO', 
                    name: 'CMD_MOV', 
                    params: [$$[$0]] 
                };
            
break;
case 69:
 
                this.$ = {
                    nodeType: 'COMANDO', 
                    name: 'CMD_SAIDA', 
                    params: [$$[$0-1]] 
                };
            
break;
case 70:
 
                this.$ = {
                    nodeType: 'COMANDO', 
                    name: 'CMD_MEMORIZE - CMD_MEMORIZE_EM', 
                    params: [$$[$0-2].val,$$[$0]] 
                };
            
break;
case 71:
 
            this.$ = { 
                nodeType: 'PONTO',
                value: [$$[$0-3], $$[$0-1]] 
            }; 
        
break;
case 72:
 
      if($$[$0] == null)
      {
         this.$ = { 
                nodeType: 'PONTO',
                value: [$$[$0-1]] 
            }; 
      }else
      {
      this.$ = { 
                nodeType: 'PONTOS',
                value: [$$[$0-1],$$[$0]] 
            }; 
      }

           
        
break;
case 73:
this.$ = [$$[$0]];
break;
case 74:
$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,10:7,11:$V0,12:15,15:3,16:5,18:8,19:$V1,20:14,23:9,24:$V2,25:$V3,26:10,27:$V4,28:4,29:6,30:$V5,31:13,32:$V6,34:16,35:$V7,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,58:12,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm,69:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:34,78:$Vu,79:$Vv,80:$Vw},{1:[3]},{5:[1,50],10:7,11:$V0,12:15,15:51,16:5,18:8,19:$V1,20:14,23:9,24:$V2,25:$V3,26:10,27:$V4,28:4,29:6,30:$V5,31:13,32:$V6,34:16,35:$V7,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,58:12,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm,69:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:34,78:$Vu,79:$Vv,80:$Vw},o($Vx,[2,73]),{9:[1,52]},{9:$Vy},{9:[1,54]},o($Vx,[2,13]),o($Vx,[2,14]),{9:[1,55]},{9:[1,56]},o($Vx,[2,17]),o($Vz,[2,50]),o($VA,[2,75],{31:13,33:57,16:58,32:$V6}),o($VB,[2,20],{40:$VC,41:$VD,42:$VE,43:$VF,44:$VG,54:$VH,55:$VI,56:$VJ,57:$VK}),o($VB,[2,21],{38:[1,68],39:[1,69]}),o($VB,[2,22],{40:$VL}),{36:[1,71]},{12:72,20:73,25:$V3,34:74,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh},{20:75,36:$VM,53:$Vg,54:$Vh},{25:[1,77]},{25:[1,78]},{36:$VN,51:79},o($Vz,[2,56]),o($Vz,[2,57]),{36:$VN,51:81},{53:[1,82]},{36:$VN,51:83},{25:[1,84]},{53:[1,85]},{25:[1,86]},{53:[1,87]},{36:$VN,51:88},{36:$VN,51:89},o($Vz,[2,67]),{59:90,60:[1,91],61:[1,92],62:[1,93],63:[1,94]},{36:[1,95]},{28:96,58:12,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm,69:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:34,78:$Vu,79:$Vv,80:$Vw},o($VO,[2,43]),{20:97,36:$VM,53:$Vg,54:$Vh},{12:99,20:98,25:$V3,34:74,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh},{12:100,20:73,25:$V3,34:74,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh},o($VP,[2,37]),o($VP,[2,38]),o($VP,[2,39]),o($VP,[2,40]),{36:$VN,51:101},{36:$VN,51:102},o([9,13,17,32,37,38,39,40,81],[2,26]),{12:15,20:14,25:$V3,29:103,34:16,35:$V7,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh},{1:[2,1]},o($Vx,[2,74]),o($Vx,[2,10]),o($Vx,[2,11]),o($Vx,[2,12]),o($Vx,[2,15]),o($Vx,[2,16]),o($VA,[2,19]),o($VA,[2,76]),{20:104,36:$VM,53:$Vg,54:$Vh},{20:105,36:$VM,53:$Vg,54:$Vh},{20:106,36:$VM,53:$Vg,54:$Vh},{20:107,36:$VM,53:$Vg,54:$Vh},{20:108,36:$VM,53:$Vg,54:$Vh},{20:109,36:$VM,53:$Vg,54:$Vh},{20:110,36:$VM,53:$Vg,54:$Vh},{20:111,36:$VM,53:$Vg,54:$Vh},{20:112,36:$VM,53:$Vg,54:$Vh},{12:113,20:73,25:$V3,34:74,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh},{12:114,20:73,25:$V3,34:74,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh},{25:$V3,34:115},{25:$V3,34:116},{13:[1,117]},{40:$VC,41:$VD,42:$VE,43:$VF,44:$VG,54:$VH,55:$VI,56:$VJ,57:$VK},{40:$VL},{21:[1,118],54:$VH,55:$VI,56:$VJ,57:$VK},{20:119,36:$VM,53:$Vg,54:$Vh},{14:[1,120]},{9:[2,9]},o($Vz,[2,55]),{20:121,36:$VM,53:$Vg,54:$Vh},o($Vz,[2,58]),o($Vz,[2,59]),{36:$VN,51:123,70:122},o($Vz,[2,61]),o($Vz,[2,62]),o($Vz,[2,63]),o($Vz,[2,64]),{36:$VN,51:124},{36:$VN,51:125},o($Vz,[2,68]),o($Vz,[2,51]),o($Vz,[2,52]),o($Vz,[2,53]),o($Vz,[2,54]),{25:$V3,34:126},o($Vz,[2,18]),o($VQ,[2,44],{56:$VJ,57:$VK}),{37:$VR,40:$VC,41:$VD,42:$VE,43:$VF,44:$VG,54:$VH,55:$VI,56:$VJ,57:$VK},{37:[1,128],38:[1,129],39:[1,130]},o($VP,[2,36]),o($VP,[2,41]),o($VP,[2,42]),{81:[1,131]},o($VQ,[2,45],{56:$VJ,57:$VK}),o($VQ,[2,46],{56:$VJ,57:$VK}),o($VO,[2,47]),o($VO,[2,48]),o($VP,[2,30],{54:$VH,55:$VI,56:$VJ,57:$VK}),o($VP,[2,31],{54:$VH,55:$VI,56:$VJ,57:$VK}),o($VP,[2,32],{54:$VH,55:$VI,56:$VJ,57:$VK}),o($VP,[2,33],{54:$VH,55:$VI,56:$VJ,57:$VK}),o($VP,[2,34],{54:$VH,55:$VI,56:$VJ,57:$VK}),o($VB,[2,24]),o($VB,[2,25]),o($VP,[2,35]),{37:[1,132]},{14:[1,133]},{20:134,36:$VM,53:$Vg,54:$Vh},{37:$VR,54:$VH,55:$VI,56:$VJ,57:$VK},{16:135,31:13,32:$V6},{7:[1,136],54:$VH,55:$VI,56:$VJ,57:$VK},o($Vz,[2,60]),o($Vz,[2,77],{51:123,82:137,70:138,36:$VN}),{36:$VN,51:139},o($Vz,[2,66]),{37:[1,140]},o($VO,[2,49]),o($VP,[2,27]),{12:141,20:73,25:$V3,34:74,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh},{12:142,20:73,25:$V3,34:74,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh},{25:$V3,34:143},o($VB,[2,23]),{10:7,11:$V0,12:15,15:144,16:145,18:8,19:$V1,20:14,23:9,24:$V2,25:$V3,26:10,27:$V4,28:4,29:6,30:$V5,31:13,32:$V6,34:16,35:$V7,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,58:12,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm,69:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:34,78:$Vu,79:$Vv,80:$Vw},{22:[1,146],54:$VH,55:$VI,56:$VJ,57:$VK},{9:[2,8]},{20:147,36:$VM,53:$Vg,54:$Vh},o($Vz,[2,72]),o($Vz,[2,78]),o($Vz,[2,65]),o($Vz,[2,69]),{37:[1,148]},{37:[1,149]},o($Vz,[2,70]),o($Vx,[2,5]),{9:$Vy,17:[1,150]},{14:[1,151]},{37:[1,152],54:$VH,55:$VI,56:$VJ,57:$VK},o($VP,[2,28]),o($VP,[2,29]),{14:[1,153]},{10:7,11:$V0,12:15,15:154,16:5,18:8,19:$V1,20:14,23:9,24:$V2,25:$V3,26:10,27:$V4,28:4,29:6,30:$V5,31:13,32:$V6,34:16,35:$V7,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,58:12,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm,69:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:34,78:$Vu,79:$Vv,80:$Vw},o([9,13,17,32,36,37,38,39,81],[2,71]),{10:7,11:$V0,12:15,15:155,16:5,18:8,19:$V1,20:14,23:9,24:$V2,25:$V3,26:10,27:$V4,28:4,29:6,30:$V5,31:13,32:$V6,34:16,35:$V7,36:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,58:12,64:$Vi,65:$Vj,66:$Vk,67:$Vl,68:$Vm,69:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:34,78:$Vu,79:$Vv,80:$Vw},o($Vx,[2,7]),o($Vx,[2,6])],
defaultActions: {50:[2,1],78:[2,9],135:[2,8]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 30;
break;
case 1:/* skip whitespace */
break;
case 2:/* skip comments */
break;
case 3:return 64;
break;
case 4:return 65;
break;
case 5:return 66;
break;
case 6:return 67;
break;
case 7:return 71;
break;
case 8:return 68;
break;
case 9:return 80;
break;
case 10:return 81;
break;
case 11:return 76;
break;
case 12:return 72;
break;
case 13:return 74;
break;
case 14:return 73;
break;
case 15:return 69;
break;
case 16:return 75;
break;
case 17:return 35;
break;
case 18:return 79;
break;
case 19:return 78;
break;
case 20:return 60;
break;
case 21:return 61;
break;
case 22:return 62;
break;
case 23:return 63;
break;
case 24:return 48;
break;
case 25:return 49;
break;
case 26:return 50;
break;
case 27:return 52;
break;
case 28:return 25;
break;
case 29:return 56;
break;
case 30:return 57;
break;
case 31:return 54;
break;
case 32:return 32;
break;
case 33:return 55;
break;
case 34:return 36;
break;
case 35:return 37;
break;
case 36:return '{';
break;
case 37:return '}';
break;
case 38:return 7;
break;
case 39:return 9;
break;
case 40:return 8;
break;
case 41:return 41;
break;
case 42:return 42;
break;
case 43:return 43;
break;
case 44:return 44;
break;
case 45:return 40;
break;
case 46:return '=';
break;
case 47:return 45;
break;
case 48:return 38;
break;
case 49:return 39;
break;
case 50:return 46;  
break;
case 51:return 47;
break;
case 52:return 11;
break;
case 53:return 13;
break;
case 54:return 17;
break;
case 55:return 14;
break;
case 56:return 19;
break;
case 57:return 24;
break;
case 58:return 27;
break;
case 59:return 21;
break;
case 60:return 22;
break;
case 61:return 53;
break;
case 62:return 53;
break;
case 63:return 5;
break;
case 64:return 'INVALID';
break;
case 65:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:[\\r\\n]+)/i,/^(?:\s+)/i,/^(?:#[^\r\n]*)/i,/^(?:mover para)/i,/^(?:marque aqui)/i,/^(?:desmarque)/i,/^(?:desenhe uma linha ate)/i,/^(?:escreva)/i,/^(?:desenhe um circulo com raio)/i,/^(?:memorize)/i,/^(?:em)/i,/^(?:desenhe um triangulo passando por)/i,/^(?:mude a espessura da linha da caneta para)/i,/^(?:mude o estilo da linha da caneta para)/i,/^(?:mude a cor da caneta para)/i,/^(?:desenhe um poligono passando por)/i,/^(?:desenhe um quadrilatero passando por)/i,/^(?:escrever)/i,/^(?:saida)/i,/^(?:vire para o)/i,/^(?:norte)/i,/^(?:sul)/i,/^(?:leste)/i,/^(?:oeste)/i,/^(?:ha uma marca aqui)/i,/^(?:nao ha uma marca aqui)/i,/^(?:ha uma marca em)/i,/^(?:nao ha uma marca em)/i,/^(?:"[^\"]*"|'[^\']*')/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:~)/i,/^(?:or)/i,/^(?:and)/i,/^(?:true)/i,/^(?:false)/i,/^(?:se)/i,/^(?:entao)/i,/^(?:senao)/i,/^(?::)/i,/^(?:para contador de)/i,/^(?:novo comando)/i,/^(?:execultar comando)/i,/^(?:ate)/i,/^(?:faca)/i,/^(?:\d*\.\d+)/i,/^(?:[1-9][\d]*|[0]+)/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = easy;
exports.Parser = easy.Parser;
exports.parse = function () { return easy.parse.apply(easy, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}